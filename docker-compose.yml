version: '3'

services:
  redis:
    image: redis:alpine
    restart: always
    container_name: redis
    networks:
      - custom_network
    environment:
      - vm.overcommit_memory=1
    command: redis-server
    ports:
      - 6379:6379
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    networks:
      - custom_network
    logging:
        driver: 'none'
    restart: always
    ports:
        - 1025:1025 # smtp server
        - 8025:8025 # web ui
  celery:
    build: ./backend
    container_name: celery
    networks:
      - custom_network
    command: celery -A core worker -B
    restart: always
    volumes:
      - ./backend/db.sqlite3:/db.sqlite3
    links:
      - "redis"
    depends_on:
      - api
      - redis
  celery-beat:
    build: ./backend
    container_name: celery-beat
    networks:
      - custom_network
    command: celery -A core beat -l info
    volumes:
      - ./backend/db.sqlite3:/db.sqlite3
    restart: always
    links:
      - "redis"
    depends_on:
      - celery
      - api
      - redis
  flower:
    build: ./backend
    container_name: flower
    command: celery -A core flower -l info
    networks:
      - custom_network
    ports:
      - 5557:5555
    links:
      - "redis"
    restart: always
    depends_on:
      - celery
      - celery-beat
      - redis
      - api
  api:
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    container_name: api
    networks:
      - custom_network
    volumes:
      - ./backend/db.sqlite3:/db.sqlite3
      - ./backend/static:/static
      - ./backend/media:/media
    restart: always
    environment:
      - REDIS_HOST=redis
    ports:
      - 8080:8000
    depends_on:
      - mailhog
    links:
      - "mailhog"
  client:
    build:
      context: ./frontend
      dockerfile: ./Dockerfile
    container_name: client
    networks:
      - custom_network
    restart: always
    ports:
      - 8030:3000
    depends_on:
      - api
networks:
  custom_network:
    driver: bridge
